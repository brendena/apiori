{"filter":false,"title":"LinkedList.h","tooltip":"/header_files/LinkedList.h","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":302,"column":2},"end":{"row":302,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":302,"column":3},"end":{"row":302,"column":4},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":302,"column":2},"end":{"row":303,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":0},"end":{"row":304,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":0},"end":{"row":303,"column":1},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":1},"end":{"row":303,"column":2},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":2},"end":{"row":303,"column":3},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":3},"end":{"row":303,"column":4},"action":"insert","lines":["'"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":4},"end":{"row":303,"column":5},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":5},"end":{"row":303,"column":6},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":6},"end":{"row":303,"column":7},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":7},"end":{"row":303,"column":8},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":8},"end":{"row":303,"column":9},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":9},"end":{"row":303,"column":10},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":10},"end":{"row":303,"column":11},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":11},"end":{"row":303,"column":12},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":12},"end":{"row":303,"column":13},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":13},"end":{"row":303,"column":14},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":14},"end":{"row":303,"column":15},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":15},"end":{"row":303,"column":16},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":16},"end":{"row":303,"column":17},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":17},"end":{"row":303,"column":18},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":18},"end":{"row":303,"column":19},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":19},"end":{"row":303,"column":20},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":20},"end":{"row":303,"column":21},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":21},"end":{"row":303,"column":22},"action":"insert","lines":["q"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":22},"end":{"row":303,"column":23},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":23},"end":{"row":303,"column":24},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":24},"end":{"row":303,"column":25},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":25},"end":{"row":303,"column":26},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":26},"end":{"row":303,"column":27},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":27},"end":{"row":303,"column":28},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":28},"end":{"row":303,"column":29},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":28},"end":{"row":303,"column":29},"action":"remove","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":28},"end":{"row":303,"column":29},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":29},"end":{"row":303,"column":30},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":30},"end":{"row":303,"column":31},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":31},"end":{"row":303,"column":32},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":32},"end":{"row":303,"column":33},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":33},"end":{"row":303,"column":34},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":34},"end":{"row":303,"column":35},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":35},"end":{"row":303,"column":36},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":36},"end":{"row":303,"column":37},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":37},"end":{"row":303,"column":38},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":38},"end":{"row":303,"column":39},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":39},"end":{"row":303,"column":40},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":40},"end":{"row":303,"column":41},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":41},"end":{"row":303,"column":42},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":42},"end":{"row":303,"column":43},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":43},"end":{"row":303,"column":44},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":44},"end":{"row":303,"column":45},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":45},"end":{"row":303,"column":46},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":46},"end":{"row":303,"column":47},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":47},"end":{"row":303,"column":48},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":48},"end":{"row":303,"column":49},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":49},"end":{"row":303,"column":50},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":50},"end":{"row":303,"column":51},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":301,"column":1},"end":{"row":302,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":302,"column":0},"end":{"row":303,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":307,"column":0},"end":{"row":308,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":306,"column":2},"end":{"row":307,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":3},"end":{"row":317,"column":7},"action":"remove","lines":["cout"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":3},"end":{"row":317,"column":4},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":4},"end":{"row":317,"column":5},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":5},"end":{"row":317,"column":6},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":6},"end":{"row":317,"column":7},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":7},"end":{"row":317,"column":8},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":8},"end":{"row":317,"column":9},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":18},"end":{"row":317,"column":19},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":17},"end":{"row":317,"column":18},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":16},"end":{"row":317,"column":17},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":15},"end":{"row":317,"column":16},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":14},"end":{"row":317,"column":15},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":15},"end":{"row":317,"column":16},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":14},"end":{"row":317,"column":15},"action":"remove","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":13},"end":{"row":317,"column":14},"action":"remove","lines":["\""]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":12},"end":{"row":317,"column":13},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":11},"end":{"row":317,"column":12},"action":"remove","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":10},"end":{"row":317,"column":11},"action":"remove","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":9},"end":{"row":317,"column":10},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":9},"end":{"row":317,"column":10},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":30},"end":{"row":317,"column":34},"action":"remove","lines":["endl"]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":30},"end":{"row":317,"column":32},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":31},"end":{"row":317,"column":32},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":317,"column":32},"end":{"row":317,"column":33},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":318,"column":3},"end":{"row":319,"column":0},"action":"insert","lines":["",""]},{"start":{"row":319,"column":0},"end":{"row":319,"column":2},"action":"insert","lines":["\t\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":2},"end":{"row":319,"column":3},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":3},"end":{"row":319,"column":4},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":4},"end":{"row":319,"column":5},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":5},"end":{"row":319,"column":6},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":6},"end":{"row":319,"column":7},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":7},"end":{"row":319,"column":8},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":8},"end":{"row":319,"column":9},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":9},"end":{"row":319,"column":10},"action":"insert","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":10},"end":{"row":319,"column":11},"action":"insert","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":11},"end":{"row":319,"column":12},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":12},"end":{"row":319,"column":14},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":13},"end":{"row":319,"column":14},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":14},"end":{"row":319,"column":15},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":319,"column":16},"end":{"row":319,"column":17},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":325,"column":6},"action":"remove","lines":["/*","errorlog","possible error with bool Operator++","","*/","#ifndef LINKED_LIST","#define LINKED_LIST","","#include <iostream>","#include <stdlib.h> //atio","#include \"Node.h\"","using namespace std;","","template <class T>","class LinkedList","{","    private:","        Node<T> *mHead, *mTail, *iterator;","        int     mCount;","    public:","    ","    //getters","    \tint  getCount();  //works","    \tT    getData(int index);","    \tnode<T>* getHead(){ return mHead;};","    \t","    //setters","    \tvoid setData(int index, T data);","\t\tvoid createArray(int size);","    \tvoid setArrayData(int index, int data);","    \t"," \t//utilities","    \tvoid clear();","    \tvoid display();","    \tbool isEmpty();","    \tbool dealWithAddingValuesToBeginning(Node<T>* value);","    \tvoid appendToTheEnd(Node<T>* value);","    \tbool search(int value);","    \tvoid print();","    //dealing with iterator","    \tvoid clearIterator();","\t\tint getIteratorSize();","\t\tT* getIteratorValue();","\t\t","    //operttor//constructors","    \tT operator[](int index);","    \tbool operator++(int value); /************ added the int value and it compiled May not work *********************/","    \t","    \tLinkedList operator=(LinkedList other)","    \t","    \tLinkedList();","    \t~LinkedList();","    \t","};","","template <class T>","LinkedList<T>::LinkedList()","{","\tmHead = NULL;","\tmTail = NULL;","\titerator = NULL;","\tmCount = 0;","}","","template <class T>","LinkedList<T>::~LinkedList()","{","   clear();","}","","template <class T>","int LinkedList<T>::getCount()","{","\treturn mCount;","}","","template <class T>","T LinkedList<T>::getData(int index)","{","\tNode<T>* ptrIterator = mHead;","\tfor (int i = 0; i < index; i++)","\t{","\t\tptrIterator = ptrIterator->mNext;","\t}","\treturn ptrIterator->mData;","}","","template <class T>","void LinkedList<T>::setData(int index, T data)  ///really bad implementation","{","\tif (mCount < index)","\t{ ","\t\tcout << \"this is a no no \" << endl; ","\t}","\telse if (mHead == NULL)","\t{","\t\tmHead = new Node<T>(data);","\t\tmTail = mHead;","\t}","\telse{","\t\tNode<T>* tmp = mHead;","\t\tfor (int i = 0; tmp->mNext != NULL && index == i; i++)//get the node right before the index","\t\t{","\t\t\ttmp = tmp->mNext;","\t\t}","\t}","}","","","template <class T>","void LinkedList<T>::clear()  //doesn't work","{","\tNode<T> *nodePtr = mHead;","\twhile(nodePtr != NULL)","\t{","\t  //garbage keeps track of node to be deleted","\t  Node<T> *garbage = nodePtr;","\t  //move on to the next node, if any","\t  nodePtr = nodePtr->mNext;","\t  delete garbage;","\t}","\t","\tdelete mHead;","\tdelete mTail;","\tmHead = mTail = NULL;","\tmCount = 0;","}","","","template <class T>","T LinkedList<T>::operator[](int index)","{","\tNode<T>* ptrIterator = mHead;","\tfor (int i = 0; i < index && ptrIterator->mNext != NULL; i++)","\t{","\t\tptrIterator = ptrIterator->mNext;","\t}","\treturn ptrIterator->mData;","}","","","/*","pre:","Post:","Purpose: is to keep a position","*/","template <class T>","bool LinkedList<T>::operator++(int value)","{","\t","\tif(isEmpty())","\t{","\t\tcout << \"empty \\n\";","\t\treturn 0;","\t}","\telse","\t{","\t\tcout << \"iterator value \" << iterator->mData[0] << \"\\n\"; ","\t\titerator = iterator->mNext;","\t}","\tif(iterator == NULL)","\t{","\t\tcout << \"null\\n\";","\t\treturn 0;","\t}","\telse","\t{","\t\treturn 1;","\t}","\t","\t//return false;  this works","}","","template <class T>","bool LinkedList<T>::isEmpty()","{","\treturn mHead == NULL;","}","","/*","pre:size of the array","Post: is to then add the items to the array","purpose:","the purpose is to make the tail ready to add the elements to.  ","We want the tail to be ready because where allways going to be adding onto the tail.","*/","template <class T>","void LinkedList<T>::createArray(int size)","{","\tNode<T>* newNode = new Node<T>(size);","\tappendToTheEnd(newNode);","}","template <class T>","void LinkedList<T>::setArrayData(int index, int data)","{","\tmTail->mData[index] = data;","}","","","template <class T>","void LinkedList<T>::clearIterator()","{","\titerator = mHead;","}","","template <class T>","int LinkedList<T>::getIteratorSize()","{","\treturn iterator->mSize;\t","}","","template <class T>","T* LinkedList<T>::getIteratorValue()","{","\treturn iterator->mData;","}","","/*","pre: just a value","post:  return a true if its been added else returns false","purpose:  is to create the first 2 values of the linked list","","// might be a problem if the number come up twice first go////////","*/","template <class T>","bool LinkedList<T>::dealWithAddingValuesToBeginning(Node<T>* value)","{","\tif(mHead == NULL)","\t{","\t\tmHead = value;","\t\tmTail = mHead;","\t\tmCount++;","\t\treturn true;","\t}","\telse if(mHead == mTail)","\t{","\t\tmHead->mNext = value;","\t\tmTail = mHead->mNext;","\t\tmCount++;","\t\treturn true;","\t}","\treturn false;","}","","template <class T>","void LinkedList<T>::appendToTheEnd(Node<T>* value)","{","\tif(!dealWithAddingValuesToBeginning(value))","\t{","\t\tmTail->mNext = value;","\t\tmTail = mTail->mNext;","\t}","}","","template <class T>","bool LinkedList<T>::search(int value)","{","\tNode<T>* ptr = mHead;","","\twhile(ptr != NULL)","\t{","\t\tfor(int i = 0; i < ptr->mSize + 1; i++)","\t\t{","\t\t\tif(value == ptr->mData[i])","\t\t\t{","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t\tptr = ptr->mNext;","\t}","\treturn false;","}","","","template <class T>","void LinkedList<T>::display()","{","\tNode<T>* ptr = mHead;","\tint sizeArray;","\tcout << \"\\ndisplay\\n\";","\tfor (int i = 0; ptr != NULL; i++)","\t{","\t\tcout << \"\\n\\n\\nobjects number \" << i;","\t\tfor(int i = 0; i <= ptr->mSize; i++)","\t\t{","\t\t\tcout << \"data \" << ptr->mData[i] << endl;","\t\t}","\t\tptr = ptr->mNext;","\t}","}","/*","pre:","post: ","purpose: to copy the linked list to another array","*/","template <class T>","LinkedList LinkedList<T>::operator=(LinkedList other)","{","\tclear();","\t","\tmHead = other.getHead();","}","","","/*","don't we want the frequency count when we print out","*/","template <class T>","LinkedList LinkedList<T>::print()","{","\tofstream myfile;","\tmyfile.open (\"output.txt\");","\tNode<T>* ptr = mHead;","\twhile(ptr != NULL)","\t{","\t\tfor(int i = 0; i <= ptr->mSize; i++)","\t\t{","\t\t\tmyfile << ptr->mData[i] << \"  \";","\t\t}","\t\tmyfile << \"\\n\";","\t\tptr = ptr->mNext;","\t}","\t","}","","#endif"]},{"start":{"row":0,"column":0},"end":{"row":325,"column":6},"action":"insert","lines":["/*","errorlog","possible error with bool Operator++","","*/","#ifndef LINKED_LIST","#define LINKED_LIST","","#include <iostream>","#include <stdlib.h> //atio","#include \"Node.h\"","using namespace std;","","template <class T>","class LinkedList","{","    private:","        Node<T> *mHead, *mTail, *iterator;","        int     mCount;","    public:","    ","    //getters","    \tint  getCount();  //works","    \tT    getData(int index);","    \tNode<T>* getHead(){ return mHead;};","    \t","    //setters","    \tvoid setData(int index, T data);","\t\tvoid createArray(int size);","    \tvoid setArrayData(int index, int data);","    \t"," \t//utilities","    \tvoid clear();","    \tvoid display();","    \tbool isEmpty();","    \tbool dealWithAddingValuesToBeginning(Node<T>* value);","    \tvoid appendToTheEnd(Node<T>* value);","    \tbool search(int value);","    \tvoid print();","    //dealing with iterator","    \tvoid clearIterator();","\t\tint getIteratorSize();","\t\tT* getIteratorValue();","\t\t","    //operttor//constructors","    \tT operator[](int index);","    \tbool operator++(int value); /************ added the int value and it compiled May not work *********************/","    \t","    \tLinkedList<T> operator=(LinkedList<T> other);","    \t","    \tLinkedList();","    \t~LinkedList();","    \t","};","","template <class T>","LinkedList<T>::LinkedList()","{","\tmHead = NULL;","\tmTail = NULL;","\titerator = NULL;","\tmCount = 0;","}","","template <class T>","LinkedList<T>::~LinkedList()","{","   clear();","}","","template <class T>","int LinkedList<T>::getCount()","{","\treturn mCount;","}","","template <class T>","T LinkedList<T>::getData(int index)","{","\tNode<T>* ptrIterator = mHead;","\tfor (int i = 0; i < index; i++)","\t{","\t\tptrIterator = ptrIterator->mNext;","\t}","\treturn ptrIterator->mData;","}","","template <class T>","void LinkedList<T>::setData(int index, T data)  ///really bad implementation","{","\tif (mCount < index)","\t{ ","\t\tcout << \"this is a no no \" << endl; ","\t}","\telse if (mHead == NULL)","\t{","\t\tmHead = new Node<T>(data);","\t\tmTail = mHead;","\t}","\telse{","\t\tNode<T>* tmp = mHead;","\t\tfor (int i = 0; tmp->mNext != NULL && index == i; i++)//get the node right before the index","\t\t{","\t\t\ttmp = tmp->mNext;","\t\t}","\t}","}","","","template <class T>","void LinkedList<T>::clear()  //doesn't work","{","\tNode<T> *nodePtr = mHead;","\twhile(nodePtr != NULL)","\t{","\t  //garbage keeps track of node to be deleted","\t  Node<T> *garbage = nodePtr;","\t  //move on to the next node, if any","\t  nodePtr = nodePtr->mNext;","\t  delete garbage;","\t}","\t","\tdelete mHead;","\tdelete mTail;","\tmHead = mTail = NULL;","\tmCount = 0;","}","","","template <class T>","T LinkedList<T>::operator[](int index)","{","\tNode<T>* ptrIterator = mHead;","\tfor (int i = 0; i < index && ptrIterator->mNext != NULL; i++)","\t{","\t\tptrIterator = ptrIterator->mNext;","\t}","\treturn ptrIterator->mData;","}","","","/*","pre:","Post:","Purpose: is to keep a position","*/","template <class T>","bool LinkedList<T>::operator++(int value)","{","\t","\tif(isEmpty())","\t{","\t\tcout << \"empty \\n\";","\t\treturn 0;","\t}","\telse","\t{","\t\tcout << \"iterator value \" << iterator->mData[0] << \"\\n\"; ","\t\titerator = iterator->mNext;","\t}","\tif(iterator == NULL)","\t{","\t\tcout << \"null\\n\";","\t\treturn 0;","\t}","\telse","\t{","\t\treturn 1;","\t}","\t","\t//return false;  this works","}","","template <class T>","bool LinkedList<T>::isEmpty()","{","\treturn mHead == NULL;","}","","/*","pre:size of the array","Post: is to then add the items to the array","purpose:","the purpose is to make the tail ready to add the elements to.  ","We want the tail to be ready because where allways going to be adding onto the tail.","*/","template <class T>","void LinkedList<T>::createArray(int size)","{","\tNode<T>* newNode = new Node<T>(size);","\tappendToTheEnd(newNode);","}","template <class T>","void LinkedList<T>::setArrayData(int index, int data)","{","\tmTail->mData[index] = data;","}","","","template <class T>","void LinkedList<T>::clearIterator()","{","\titerator = mHead;","}","","template <class T>","int LinkedList<T>::getIteratorSize()","{","\treturn iterator->mSize;\t","}","","template <class T>","T* LinkedList<T>::getIteratorValue()","{","\treturn iterator->mData;","}","","/*","pre: just a value","post:  return a true if its been added else returns false","purpose:  is to create the first 2 values of the linked list","","// might be a problem if the number come up twice first go////////","*/","template <class T>","bool LinkedList<T>::dealWithAddingValuesToBeginning(Node<T>* value)","{","\tif(mHead == NULL)","\t{","\t\tmHead = value;","\t\tmTail = mHead;","\t\tmCount++;","\t\treturn true;","\t}","\telse if(mHead == mTail)","\t{","\t\tmHead->mNext = value;","\t\tmTail = mHead->mNext;","\t\tmCount++;","\t\treturn true;","\t}","\treturn false;","}","","template <class T>","void LinkedList<T>::appendToTheEnd(Node<T>* value)","{","\tif(!dealWithAddingValuesToBeginning(value))","\t{","\t\tmTail->mNext = value;","\t\tmTail = mTail->mNext;","\t}","}","","template <class T>","bool LinkedList<T>::search(int value)","{","\tNode<T>* ptr = mHead;","","\twhile(ptr != NULL)","\t{","\t\tfor(int i = 0; i < ptr->mSize + 1; i++)","\t\t{","\t\t\tif(value == ptr->mData[i])","\t\t\t{","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t\tptr = ptr->mNext;","\t}","\treturn false;","}","","","template <class T>","void LinkedList<T>::display()","{","\tNode<T>* ptr = mHead;","\tint sizeArray;","\tcout << \"\\ndisplay\\n\";","\tfor (int i = 0; ptr != NULL; i++)","\t{","\t\tcout << \"\\n\\n\\nobjects number \" << i;","\t\tfor(int i = 0; i <= ptr->mSize; i++)","\t\t{","\t\t\tcout << \"data \" << ptr->mData[i] << endl;","\t\t}","\t\tptr = ptr->mNext;","\t}","}","/*","pre:","post: ","purpose: to copy the linked list to another array","*/","template <class T>","LinkedList<T> LinkedList<T>::operator=(LinkedList other)","{","\tclear();","\t","\tmHead = other.getHead();","}","","","/*","don't we want the frequency count when we print out","*/","template <class T>","void LinkedList<T>::print()","{","\tofstream myfile;","\tmyfile.open (\"output.txt\");","\tNode<T>* ptr = mHead;","\twhile(ptr != NULL)","\t{","\t\tfor(int i = 0; i <= ptr->mSize; i++)","\t\t{","\t\t\tmyfile << ptr->mData[i] << \"  \";","\t\t}","\t\tmyfile << \"\\n\";","\t\tptr = ptr->mNext;","\t}","\t","}","","#endif"]}]}]]},"ace":{"folds":[],"scrolltop":12,"scrollleft":0,"selection":{"start":{"row":325,"column":6},"end":{"row":325,"column":6},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":212,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1417660403198,"hash":"db39a050e64460b9456c7673c67785ddd6da0e91"}