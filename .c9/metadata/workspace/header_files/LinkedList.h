{"changed":true,"filter":false,"title":"LinkedList.h","tooltip":"/header_files/LinkedList.h","value":"/*\nerrorlog\npossible error with bool Operator++\n\n*/\n#ifndef LINKED_LIST\n#define LINKED_LIST\n\n#include <iostream>\n#include <stdlib.h> //atio\n#include \"Node.h\"\nusing namespace std;\n\ntemplate <class T>\nclass LinkedList\n{\n    private:\n        Node<T> *mHead, *mTail, *iterator;\n        int     mCount;\n    public:\n    \n    //getters\n    \tint  getCount();  //works\n    \tT    getData(int index);\n    \tNode<T>* getHead(){ return mHead;};\n  \n    \t\n    //setters\n    \tvoid setData(int index, T data);\n\t\tvoid createArray(int size);\n    \tvoid setArrayData(int index, int data);\n    \tvoid setHead(Node<T>* joe);\n    \t\n \t//utilities\n    \tvoid clear();\n    \tvoid display();\n    \tbool isEmpty();\n    \tbool dealWithAddingValuesToBeginning(Node<T>* value);\n    \tvoid appendToTheEnd(Node<T>* value);\n    \tbool search(T value);\n    \tvoid print();\n    \tbool searchForNode(Node<T>*  bob);\n\t\tvoid deleteByIndex(int index);\n    \t\n    //dealing with iterator\n    \tvoid clearIterator();\n\t\tint getIteratorSize();\n\t\tT* getIteratorValue();\n\t\t\n    //operator//constructors\n    \tT operator[](int index);\n    \tbool operator++(int value); /************ added the int value and it compiled May not work *********************/\n    \t\n    \tvoid operatorEquals(LinkedList<T>& other);\n    \t\n    \tLinkedList();\n    \t~LinkedList();\n    \t\n};\n\ntemplate <class T>\nLinkedList<T>::LinkedList()\n{\n\tmHead = NULL;\n\tmTail = NULL;\n\titerator = NULL;\n\tmCount = 0;\n}\n\ntemplate <class T>\nLinkedList<T>::~LinkedList()\n{\n   clear();\n}\n\ntemplate <class T>\nint LinkedList<T>::getCount()\n{\n\treturn mCount;\n}\n\ntemplate <class T>\nT LinkedList<T>::getData(int index)\n{\n\tNode<T>* ptrIterator = mHead;\n\tfor (int i = 0; i < index; i++)\n\t{\n\t\tptrIterator = ptrIterator->mNext;\n\t}\n\treturn ptrIterator->mData;\n}\n\ntemplate <class T>\nvoid LinkedList<T>::setData(int index, T data)  ///doesn't work\n{\n\tif (mCount < index)\n\t{ \n\t\tcout << \"this is a no no \" << endl; \n\t}\n\telse if (mHead == NULL)\n\t{\n\t\tmHead = new Node<T>(data);\n\t\tmTail = mHead;\n\t\tmCount++;\n\t}\n\telse{\n\t\tNode<T>* tmp = mHead;\n\t\tfor (int i = 0; tmp->mNext != NULL && index == i; i++)//get the node right before the index\n\t\t{\n\t\t\ttmp = tmp->mNext;\n\t\t}\n\t}\n}\n\n\ntemplate <class T>\nvoid LinkedList<T>::clear()  \n{\n\tif(mHead != NULL)\n\t{\n\t\tNode<T> *nodePtr = mHead;\n\t\tNode<T> *garbage;\n\t\twhile(nodePtr != NULL)\n\t\t{\n\t\t  //garbage keeps track of node to be deleted\n\t\t  garbage = nodePtr;\n\t\t  //move on to the next node, if any\n\t\t  nodePtr = nodePtr->mNext;\n\t\t  delete garbage;\n\t\t}\n\t}\n\tmHead = mTail = NULL;\n\tmCount = 0;\n}\n\n\ntemplate <class T>\nT LinkedList<T>::operator[](int index)\n{\n\tNode<T>* ptrIterator = mHead;\n\tfor (int i = 0; i < index && ptrIterator->mNext != NULL; i++)\n\t{\n\t\tptrIterator = ptrIterator->mNext;\n\t}\n\treturn ptrIterator->mData;\n}\n\n\n/*\npre:\nPost:\nPurpose: is to keep a position\n*/\ntemplate <class T>\nbool LinkedList<T>::operator++(int value)\n{\n\t\n\tif(isEmpty())\n\t{\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\titerator = iterator->mNext;\n\t}\n\tif(iterator == NULL)\n\t{\n\t\treturn 0;\n\t}\n\telse\n\t{\n\t\treturn 1;\n\t}\n\t\n\t//return false;  this works\n}\n\ntemplate <class T>\nbool LinkedList<T>::isEmpty()\n{\n\treturn mHead == NULL;\n}\n\n/*\npre:size of the array\nPost: is to then add the items to the array\npurpose:\nthe purpose is to make the tail ready to add the elements to.  \nWe want the tail to be ready because where allways going to be adding onto the tail.\n*/\ntemplate <class T>\nvoid LinkedList<T>::createArray(int size)\n{\n\tNode<T>* newNode = new Node<T>(size);\n\tappendToTheEnd(newNode);\n}\ntemplate <class T>\nvoid LinkedList<T>::setArrayData(int index, int data)\n{\n\tmTail->mData[index] = data;\n}\n\n\ntemplate <class T>\nvoid LinkedList<T>::clearIterator()\n{\n\titerator = mHead;\n}\n\ntemplate <class T>\nint LinkedList<T>::getIteratorSize()\n{\n\treturn iterator->mSize;\t\n}\n\ntemplate <class T>\nT* LinkedList<T>::getIteratorValue()\n{\n\treturn iterator->mData;\n}\n\n/*\npre: just a value\npost:  return a true if its been added else returns false\npurpose:  is to create the first 2 values of the linked list\n\n// might be a problem if the number come up twice first go////////\n*/\ntemplate <class T>\nbool LinkedList<T>::dealWithAddingValuesToBeginning(Node<T>* value)\n{\n\tif(mHead == NULL)\n\t{\n\t\tmHead = value;\n\t\tmTail = mHead;\n\t\tmCount++;\n\t\treturn true;\n\t}\n\telse if(mHead == mTail)\n\t{\n\t\tmHead->mNext = value;\n\t\tmTail = mHead->mNext;\n\t\tmCount++;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\ntemplate <class T>\nvoid LinkedList<T>::appendToTheEnd(Node<T>* value)\n{\n\tif(!dealWithAddingValuesToBeginning(value))\n\t{\n\t\tmTail->mNext = value;\n\t\tmTail = mTail->mNext;\n\t\tmCount++;\n\t}\n}\n/*\nPre: search for a item in the linkedList\nPost: return true if found\nPurpose: find if the items was added to the newList first go\n*/\ntemplate <class T>\nbool LinkedList<T>::search(T value)\n{\n\tNode<T>* ptr = mHead;\n\n\twhile(ptr != NULL)\n\t{\n\t\tfor(int i = 0; i < ptr->mSize; i++)\n\t\t{\n\t\t\tif(value == ptr->mData[i])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tptr = ptr->mNext;\n\t}\n\treturn false;\n}\n\ntemplate <typename T>\nbool LinkedList<T>::searchForNode(Node<T>* keyNode)\n{\n\tNode<T>* currNode = mHead;\n\tfor(int i = 0; i < mCount; i++)\n\t{\n\t\tif(currNode->shittyOperatorComparison(keyNode))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tcurrNode = currNode->mNext;\n\t}\n\treturn false;\n}\n\ntemplate <class T>\nvoid LinkedList<T>::display()\n{\n\tNode<T>* ptr = mHead;\n\tcout << \"\\ndisplay\\n\";\n\tfor (int i = 0; ptr != NULL; i++)\n\t{\n\t\tcout << \"\\n\\n\\nobjects number \" << i << endl;\n\t\tfor(int i = 0; i < ptr->mSize; i++)\n\t\t{\n\t\t\tcout << \"data \" << ptr->mData[i] << endl;\n\t\t}\n\t\tptr = ptr->mNext;\n\t}\n}\n/*\npre:\npost: \npurpose: to copy the linked list to another array\n*/\ntemplate <class T>\nvoid LinkedList<T>::operatorEquals(LinkedList<T>& other)\n{\n\tclear();\n\tmHead = other.getHead();\n\tmCount = other.getCount();\n}\n\n/*\ndon't we want the frequency count when we print out\n\nleave a extra \\n at the end of the print output.txt\n*/\ntemplate <class T>\nvoid LinkedList<T>::print()\n{\n\tofstream myfile;\n\tmyfile.open (mHead.mCount + \"output.txt\");\n\tNode<T>* ptr = mHead;\n\twhile(ptr != NULL)\n\t{\n\t\tmyfile << ptr->mData[0];\n\t\tfor(int i = 1; i < ptr->mSize; i++)\n\t\t{\n\t\t\tmyfile << \"  \" << ptr->mData[i];\n\t\t}\n\t\tmyfile << \"\\n\";\n\t\tptr = ptr->mNext;\n\t}\n\t\n}\ntemplate <class T>\nvoid LinkedList<T>::setHead(Node<T>* joe)\n{\n\tmHead = joe;\n}\n\ntemplate <class T>\nvoid LinkedList<T>::deleteByIndex(int index)\n{\n\tNode<T>* ptr;\n\tif(index >= mCount) //index greater then count\n\t{\n\t\tcout << \"went over bounds\\n\";\n\t}\n\telse if(mHead->mNext == NULL && index == 0)\n\t{\n\t\tdelete mHead;\n\t\tmHead = NULL;\n\t}\n\telse if(index == 0)\n\t{\n\t\tptr = mHead->mNext;\n\t\tdelete mHead;\n\t\tmHead = ptr;\n\t\tmCount--;\n\t}\n\telse\n\t{\n\t\tptr = mHead;\n\t\tfor(int i = 0; i < index - 1; i++) //iterate through until element before index\n\t\t{\n\t\t\tptr = ptr->mNext;\n\t\t}\n\t\tNode<T>* deleteJunkNode = ptr->mNext;\n\t\tif(index == mCount -1) //is the tail\n\t\t{\n\t\t\tptr->mNext = NULL;\n\t\t\tmTail = ptr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tptr->mNext = deleteJunkNode->mNext;\n\t\t}\n\t\tdelete deleteJunkNode;\n\t\tmCount--;\n\t}\n}\n\n#endif","undoManager":{"mark":98,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":318,"column":49},"end":{"row":318,"column":52},"action":"insert","lines":["<T>"]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":2},"end":{"row":320,"column":3},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":1},"end":{"row":320,"column":2},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":5},"end":{"row":53,"column":19},"action":"remove","lines":["LinkedList<T> "]},{"start":{"row":53,"column":5},"end":{"row":53,"column":8},"action":"insert","lines":["voi"]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":8},"end":{"row":53,"column":10},"action":"insert","lines":["d "]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":18},"end":{"row":53,"column":19},"action":"remove","lines":["="]},{"start":{"row":53,"column":18},"end":{"row":53,"column":20},"action":"insert","lines":["Eq"]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":20},"end":{"row":53,"column":25},"action":"insert","lines":["ualls"]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":23},"end":{"row":53,"column":24},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":318,"column":0},"end":{"row":318,"column":60},"action":"remove","lines":["LinkedList<T> LinkedList<T>::operator=(LinkedList<T>& other)"]},{"start":{"row":318,"column":0},"end":{"row":318,"column":42},"action":"insert","lines":["void operatorEquals(LinkedList<T>& other);"]}]}],[{"group":"doc","deltas":[{"start":{"row":318,"column":5},"end":{"row":318,"column":20},"action":"insert","lines":["LinkedList<T>::"]}]}],[{"group":"doc","deltas":[{"start":{"row":323,"column":27},"end":{"row":324,"column":14},"action":"remove","lines":["","\treturn other;"]}]}],[{"group":"doc","deltas":[{"start":{"row":318,"column":56},"end":{"row":318,"column":57},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":26},"end":{"row":335,"column":27},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":27},"end":{"row":335,"column":28},"action":"insert","lines":["+"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":28},"end":{"row":335,"column":29},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":29},"end":{"row":335,"column":30},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":29},"end":{"row":335,"column":30},"action":"remove","lines":["m"]},{"start":{"row":335,"column":29},"end":{"row":335,"column":34},"action":"insert","lines":["mHead"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":34},"end":{"row":335,"column":35},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":35},"end":{"row":335,"column":36},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":35},"end":{"row":335,"column":36},"action":"remove","lines":["m"]},{"start":{"row":335,"column":35},"end":{"row":335,"column":41},"action":"insert","lines":["mCount"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":29},"end":{"row":335,"column":41},"action":"remove","lines":["mHead.mCount"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":14},"end":{"row":335,"column":26},"action":"insert","lines":["mHead.mCount"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":26},"end":{"row":335,"column":27},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":27},"end":{"row":335,"column":28},"action":"insert","lines":["+"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":28},"end":{"row":335,"column":29},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":43},"end":{"row":335,"column":44},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":42},"end":{"row":335,"column":43},"action":"remove","lines":["+"]}]}],[{"group":"doc","deltas":[{"start":{"row":335,"column":41},"end":{"row":335,"column":42},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":26},"end":{"row":339,"column":88},"action":"remove","lines":[" //put here so there not a unwanted \" \" if there no data there"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":26},"end":{"row":339,"column":27},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":27},"end":{"row":339,"column":28},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":28},"end":{"row":339,"column":29},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":28},"end":{"row":339,"column":29},"action":"remove","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":28},"end":{"row":339,"column":29},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":29},"end":{"row":339,"column":30},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":30},"end":{"row":339,"column":31},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":31},"end":{"row":339,"column":32},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":32},"end":{"row":339,"column":33},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":33},"end":{"row":339,"column":34},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":34},"end":{"row":339,"column":35},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":35},"end":{"row":339,"column":36},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":36},"end":{"row":339,"column":37},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":37},"end":{"row":339,"column":38},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":38},"end":{"row":339,"column":39},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":39},"end":{"row":339,"column":40},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":40},"end":{"row":339,"column":41},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":41},"end":{"row":339,"column":42},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":42},"end":{"row":339,"column":43},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":42},"end":{"row":339,"column":43},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":41},"end":{"row":339,"column":42},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":41},"end":{"row":339,"column":42},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":42},"end":{"row":339,"column":43},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":43},"end":{"row":339,"column":44},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":44},"end":{"row":339,"column":45},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":45},"end":{"row":339,"column":46},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":46},"end":{"row":339,"column":47},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":47},"end":{"row":339,"column":48},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":48},"end":{"row":339,"column":49},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":49},"end":{"row":339,"column":50},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":50},"end":{"row":339,"column":51},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":51},"end":{"row":339,"column":52},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":52},"end":{"row":339,"column":53},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":53},"end":{"row":339,"column":54},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":54},"end":{"row":339,"column":55},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":55},"end":{"row":339,"column":56},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":56},"end":{"row":339,"column":57},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":57},"end":{"row":339,"column":58},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":58},"end":{"row":339,"column":59},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":59},"end":{"row":339,"column":60},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":60},"end":{"row":339,"column":61},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":61},"end":{"row":339,"column":62},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":61},"end":{"row":339,"column":62},"action":"remove","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":60},"end":{"row":339,"column":61},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":60},"end":{"row":339,"column":61},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":61},"end":{"row":339,"column":62},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":62},"end":{"row":339,"column":63},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":63},"end":{"row":339,"column":64},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":64},"end":{"row":339,"column":65},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":65},"end":{"row":339,"column":66},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":66},"end":{"row":339,"column":67},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":67},"end":{"row":339,"column":68},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":68},"end":{"row":339,"column":69},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":9},"end":{"row":321,"column":17},"action":"remove","lines":["","\tcout << \"sdfsd\";"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":69},"end":{"row":338,"column":70},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":70},"end":{"row":338,"column":71},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":71},"end":{"row":338,"column":72},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":72},"end":{"row":338,"column":73},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":73},"end":{"row":338,"column":74},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":74},"end":{"row":338,"column":75},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":75},"end":{"row":338,"column":76},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":76},"end":{"row":338,"column":77},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":77},"end":{"row":338,"column":78},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":71},"end":{"row":338,"column":75},"action":"remove","lines":["yeah"]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":66},"end":{"row":338,"column":71},"action":"remove","lines":["ight "]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":9},"end":{"row":321,"column":0},"action":"insert","lines":["",""]},{"start":{"row":339,"column":61},"end":{"row":339,"column":66},"action":"remove","lines":[" be r"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":51},"end":{"row":339,"column":57},"action":"remove","lines":["things"]}]}],[{"group":"doc","deltas":[{"start":{"row":339,"column":37},"end":{"row":339,"column":39},"action":"remove","lines":["do"]}]}],[{"group":"doc","deltas":[{"start":{"row":320,"column":9},"end":{"row":321,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":338,"column":26},"end":{"row":338,"column":56},"action":"remove","lines":["\t//here to  stuff with  and ok"]}]}],[{"group":"doc","deltas":[{"start":{"row":351,"column":13},"end":{"row":352,"column":1},"action":"remove","lines":["","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":377,"column":40},"end":{"row":377,"column":41},"action":"remove","lines":["n"]}]}]]},"ace":{"folds":[],"scrolltop":5217,"scrollleft":0,"selection":{"start":{"row":384,"column":21},"end":{"row":384,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1417747293625}