{"filter":false,"title":"Apriori.h","tooltip":"/header_files/Apriori.h","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":142,"column":27},"end":{"row":142,"column":28},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":27},"end":{"row":142,"column":28},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":28},"end":{"row":142,"column":29},"action":"insert","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":29},"end":{"row":142,"column":30},"action":"insert","lines":["<"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":30},"end":{"row":142,"column":31},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":31},"end":{"row":142,"column":32},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":32},"end":{"row":142,"column":33},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":33},"end":{"row":142,"column":34},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":142,"column":34},"end":{"row":142,"column":35},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":67,"column":25},"end":{"row":68,"column":0},"action":"insert","lines":["",""]},{"start":{"row":68,"column":0},"end":{"row":68,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":68,"column":4},"end":{"row":69,"column":0},"action":"insert","lines":["",""]},{"start":{"row":69,"column":0},"end":{"row":69,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":4},"end":{"row":69,"column":64},"action":"insert","lines":["http://mathbits.com/MathBits/CompSci/APstrings/APgetline.htm"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":4},"end":{"row":69,"column":5},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":5},"end":{"row":69,"column":6},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":66},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":4},"end":{"row":70,"column":5},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":5},"end":{"row":70,"column":6},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":8},"end":{"row":70,"column":9},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":8},"end":{"row":70,"column":9},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"remove","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":6},"end":{"row":70,"column":7},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":7},"end":{"row":70,"column":8},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":8},"end":{"row":70,"column":9},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":9},"end":{"row":70,"column":10},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":10},"end":{"row":70,"column":11},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":11},"end":{"row":70,"column":12},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":12},"end":{"row":70,"column":13},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":13},"end":{"row":70,"column":14},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":14},"end":{"row":70,"column":15},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":15},"end":{"row":70,"column":16},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":16},"end":{"row":70,"column":17},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":17},"end":{"row":70,"column":18},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":18},"end":{"row":70,"column":19},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":19},"end":{"row":70,"column":20},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":20},"end":{"row":70,"column":21},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":21},"end":{"row":70,"column":22},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":22},"end":{"row":70,"column":23},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":23},"end":{"row":70,"column":24},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":24},"end":{"row":70,"column":25},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":25},"end":{"row":70,"column":26},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":26},"end":{"row":70,"column":27},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":27},"end":{"row":70,"column":28},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":28},"end":{"row":70,"column":29},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":29},"end":{"row":70,"column":30},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":30},"end":{"row":70,"column":31},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":31},"end":{"row":70,"column":32},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":32},"end":{"row":70,"column":33},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":33},"end":{"row":70,"column":34},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":34},"end":{"row":70,"column":35},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":35},"end":{"row":70,"column":36},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":36},"end":{"row":70,"column":37},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":36},"end":{"row":70,"column":37},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":35},"end":{"row":70,"column":36},"action":"remove","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":34},"end":{"row":70,"column":35},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":33},"end":{"row":70,"column":34},"action":"remove","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":32},"end":{"row":70,"column":33},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":32},"end":{"row":70,"column":33},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":33},"end":{"row":70,"column":34},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":34},"end":{"row":70,"column":35},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":35},"end":{"row":70,"column":36},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":36},"end":{"row":70,"column":37},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":37},"end":{"row":70,"column":38},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":38},"end":{"row":70,"column":39},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":39},"end":{"row":70,"column":40},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":40},"end":{"row":70,"column":41},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":41},"end":{"row":70,"column":42},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":42},"end":{"row":70,"column":43},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":43},"end":{"row":70,"column":44},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":44},"end":{"row":70,"column":45},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":45},"end":{"row":70,"column":46},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":46},"end":{"row":70,"column":47},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":47},"end":{"row":70,"column":48},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":48},"end":{"row":70,"column":49},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":49},"end":{"row":70,"column":50},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":50},"end":{"row":70,"column":51},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":51},"end":{"row":70,"column":52},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":52},"end":{"row":70,"column":53},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":53},"end":{"row":70,"column":54},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":54},"end":{"row":70,"column":55},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":55},"end":{"row":70,"column":56},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":56},"end":{"row":70,"column":57},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":0},"end":{"row":70,"column":59},"action":"remove","lines":["    //http://mathbits.com/MathBits/CompSci/APstrings/APgetline.htm","    /*good website to figure out getline  cin >> asdfasdf*/"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":280,"column":6},"action":"remove","lines":["/*","Error log","","So currently there a problem with getDataFileCount it doens't get the last line of data.  It someithng with testing for the -1 part","","*/","","#ifndef APRIORI","#define APRIORI","","#include <iostream>","#include <fstream>","#include <string>","#include \"LinkedList.h\"","","#define blankSpace 32","#define newLine 10","","using namespace std;","","template <typename T>","class Apriori","{","    private:","        LinkedList<T> startingData;","\t\tLinkedList<T> oldList;","\t\tLinkedList<T> newList;","        int getDataFileCount(ifstream& inputFile);","        ","        int mFrequencyThreshold;  //s on the paper","        int mCountTransactions;","        ","        //makes new item sets","        void Apriori<T>::makeSets(LinkedList oldList, LinkedList newList);","        Node<T>* Apriori<T>::makeNewNode(Node<T>* temp1, Node<T>* temp2);","        bool Apriori<T>::isSame(Node<T>* temp1, Node<T>* temp2);","    public:","        //void findMinFrequ();","        void cFirstCandList(); //create first candidate list","        void fillStartingData(string file);","        void displayEverthing();","        ","        void setFrequencyThreshold(float percentage);","        void setCountTransactions(int count);","        void prune();","\t\tApriori();","\t\tApriori(int frequencyThreshold);","};","template <typename T>","Apriori<T>::Apriori()","{","    mFrequencyThreshold = 5;","}","","template <typename T>","Apriori<T>::Apriori(int frequencyThreshold)","{","    mFrequencyThreshold = frequencyThreshold;","}","","","template <typename T>","void Apriori<T>::fillStartingData(string file)","{","    ifstream inputFile;","    inputFile.open(\"testdata.txt\");","    int hello;","    int startingPosition;","    ","","    /*","    do","    {","        ","        startingPosition = inputFile.tellg(); //tellg get the position of the file input","","        hello = getDataFileCount(inputFile);","        cout << hello << \"\\n\";","\t\tif(hello == -1){","    \t\tcout << \"hello \\n\";","    \t\tbreak;","\t\t}","\t\telse{","\t\t  inputFile.seekg(startingPosition,inputFile.beg);","\t\t  startingData.createArray(hello);","\t\t  string input;","\t\t  for(int i = 0; i <= hello; i++){","\t\t\tinputFile >> input;","\t\t\tcout << endl << input << \" \" << i << \"  \\n\";","\t\t\tstartingData.setArrayData(i,stoi(input));","\t\t\tinputFile.get(); // get the black space and new line characters","\t\t  }","\t\t}//end of else statment","\t    ","    }while()(hello != -1 && !inputFile.eof());","    */","    getDataFileCount(inputFile);","    inputFile.close();","}","","/*","pre:","post: return the number of items per line","1 item = return of 0","purpose: is to get the total amount of items so we can make a static array"," */","template <typename T>","int Apriori<T>::getDataFileCount(ifstream& inputFile)","{","    int count;","    char check = 0;","    string junk;","    if(inputFile.eof())","    {","        count = -1;","    }","    ","    ","    ","    ","    ","    /*","    else","    {","        for(count = 0 ;check != newLine && !inputFile.eof();)","        {","            inputFile >> junk;","            check = inputFile.get();","            if(check == blankSpace)","            {","                count++;","            }","\t\t\tif((int)check == -1){","\t\t\t  count = -1;","\t\t\t  break;","\t\t\t}","        }","    }","    */","    else","    {","        getline(inputFile, junk);","        for(count = 0; count < 5; i++)","        {","            cout << junk[i] << endl;","        }","    }","    return count;","}","","","","/*","void Apriori::findMinFrequ()","{","    ","    ","}","*/","template <typename T>","void Apriori<T>::cFirstCandList()","{","    ","    startingData.clearIterator();","    do{","        T* data = startingData.getIteratorValue();","        //cout << startingData.getIteratorSize() << endl << endl;","        for(int i = 0; i < startingData.getIteratorSize() + 1; i++)","        {","            cout << !startingData.search(1231) << \"if its found \\n\";","            if(!newList.search(data[i])) //not found","            {","                Node<T>* newNode = new Node<T>(0, data[i]);","                newList.appendToTheEnd(newNode);","            }","        }","    }while(startingData++);","}","template <typename T>","void Apriori<T>::displayEverthing()","{","    startingData.display();","    //oldList.display();","    //newList.display();","}","","","","//adds new nodes to new list","/*","doesn't check for doob's but i don't think it needs to","*/","template <class T>","void Apriori<T>::makeSets(LinkedList oldList, LinkedList newList)","{","    //copy newList to oldLink to free up newList for the new sets with overloaded operator","    oldList = newList;","    //clear newList","    newList.clear();","    ","    int setCount;","    int nodeCount = 0;","    Node<T>* temp1 = oldList.getHead();;","    Node<T>* temp2 = temp1->mNext;","    Node<T>* newListTemp = newList.getHead();","   ","   //sets starting node and proceeding node to start traversal","   while(temp2->mNext != NULL)","   {","        setCount = nodeCount;","        //compares one node with all other nodes","        while(setCount != oldList.getCount())","        {","            if(isSame(temp1, temp2))  //check to see if compatible","            {","                if(newList.getHead() == NULL)","                    newList.getHead() = makeNewNode(temp1, temp2);","                else","                {","                    newListTemp = newListTemp->mNext;","                    newListTemp = makeNewNode(temp1, temp2);","                }","            }","            setCount++;","            temp2 = temp2->mNext;","        }","        nodeCount++;","        ","        temp1 = temp1->mNext;","        temp2 = temp1->mNext;","   }","}","","//adds data to the new node","template <class T>","Node<T> Apriori<T>::makeNewNode(Node<T>* temp1, Node<T>* temp2)","{","   Node<T>* newNode = new Node<T>;","   newNode->mSize = size + 1;","","   for(int i = 0; i < size; i++)","   {","      newNode->mData[i] = temp1->mData[i];","   }","   newNode->mData[newNode->mSize - 1] = temp2->mData[temp2->mSize - 1];","   ","}","","//checks to see if all elements in sets are the same except for last element","template <class T>","bool Apriori<T>::isSame(Node<T>* temp1, Node<T>* temp2)","{","   bool theSame = true;","   ","   for(int i = 0; i < temp1->mSize; i++)","   {","      if(temp1->mData[i] != temp2->mData[i] && i < temp1->mSize - 1)","         theSame = false;","   }","   ","   return theSame;","}","","template <class T>","void Apriori<T>::setFrequencyThreshold(int countTransactions,float percentage)","{","    mFrequencyThreshold = (startingData.mCountTransactions * percentage) / 100;","}","template <class T>","void Apriori<T>::prune()","{","    ","    ","}","template <class T>","void Apriori<T>::setCountTransactions(int count)","{","    mCountTransactions = count;","}","","#endif"]},{"start":{"row":0,"column":0},"end":{"row":278,"column":6},"action":"insert","lines":["/*","Error log","","So currently there a problem with getDataFileCount it doens't get the last line of data.  It someithng with testing for the -1 part","","*/","","#ifndef APRIORI","#define APRIORI","","#include <iostream>","#include <fstream>","#include <string>","#include \"LinkedList.h\"","","#define blankSpace 32","#define newLine 10","","using namespace std;","","template <typename T>","class Apriori","{","    private:","        LinkedList<T> startingData;","\t\tLinkedList<T> oldList;","\t\tLinkedList<T> newList;","        int getDataFileCount(ifstream& inputFile);","        ","        int mFrequencyThreshold;  //s on the paper","        int mCountTransactions;","        ","        //makes new item sets","        void makeSets();","        Node<T>* makeNewNode(Node<T>* temp1, Node<T>* temp2);","        bool isSame(Node<T>* temp1, Node<T>* temp2);","    public:","        //void findMinFrequ();","        void cFirstCandList(); //create first candidate list","        void fillStartingData(string file);","        void displayEverthing();","        ","        void setFrequencyThreshold(float percentage);","        void setCountTransactions(int count);","        void prune();","\t\tApriori();","\t\tApriori(int frequencyThreshold);","};","template <typename T>","Apriori<T>::Apriori()","{","    mFrequencyThreshold = 5;","}","","template <typename T>","Apriori<T>::Apriori(int frequencyThreshold)","{","    mFrequencyThreshold = frequencyThreshold;","}","","","template <typename T>","void Apriori<T>::fillStartingData(string file)","{","    ifstream inputFile;","    inputFile.open(\"testdata.txt\");","    int hello;","    int startingPosition;","    /*","    do","    {","        ","        startingPosition = inputFile.tellg(); //tellg get the position of the file input","","        hello = getDataFileCount(inputFile);","        cout << hello << \"\\n\";","\t\tif(hello == -1){","    \t\tcout << \"hello \\n\";","    \t\tbreak;","\t\t}","\t\telse{","\t\t  inputFile.seekg(startingPosition,inputFile.beg);","\t\t  startingData.createArray(hello);","\t\t  string input;","\t\t  for(int i = 0; i <= hello; i++){","\t\t\tinputFile >> input;","\t\t\tcout << endl << input << \" \" << i << \"  \\n\";","\t\t\tstartingData.setArrayData(i,stoi(input));","\t\t\tinputFile.get(); // get the black space and new line characters","\t\t  }","\t\t}//end of else statment","\t    ","    }while()(hello != -1 && !inputFile.eof());","    */","    getDataFileCount(inputFile);","    inputFile.close();","}","","/*","pre:","post: return the number of items per line","1 item = return of 0","purpose: is to get the total amount of items so we can make a static array"," */","template <typename T>","int Apriori<T>::getDataFileCount(ifstream& inputFile)","{","    int count;","    char check = 0;","    string junk;","    if(inputFile.eof())","    {","        count = -1;","    }","    ","    ","    ","    ","    ","    /*","    else","    {","        for(count = 0 ;check != newLine && !inputFile.eof();)","        {","            inputFile >> junk;","            check = inputFile.get();","            if(check == blankSpace)","            {","                count++;","            }","\t\t\tif((int)check == -1){","\t\t\t  count = -1;","\t\t\t  break;","\t\t\t}","        }","    }","    */","    else","    {","        getline(inputFile, junk);","        for(count = 0; count < 5; count++)","        {","            cout << junk[count] << endl;","        }","    }","    return count;","}","","","","/*","void Apriori::findMinFrequ()","{","    ","    ","}","*/","template <typename T>","void Apriori<T>::cFirstCandList()","{","    ","    startingData.clearIterator();","    do{","        T* data = startingData.getIteratorValue();","        //cout << startingData.getIteratorSize() << endl << endl;","        for(int i = 0; i < startingData.getIteratorSize() + 1; i++)","        {","            cout << !startingData.search(1231) << \"if its found \\n\";","            if(!newList.search(data[i])) //not found","            {","                Node<T>* newNode = new Node<T>(0, data[i]);","                newList.appendToTheEnd(newNode);","            }","        }","    }while(startingData++);","}","template <typename T>","void Apriori<T>::displayEverthing()","{","    startingData.display();","    //oldList.display();","    //newList.display();","}","","","","//adds new nodes to new list","/*","doesn't check for doob's but i don't think it needs to","*/","template <class T>","void Apriori<T>::makeSets() //uses the new and old linked list","{","    //copy newList to oldLink to free up newList for the new sets with overloaded operator","    oldList = newList;","    //clear newList","    newList.clear();","    ","    int setCount;","    int nodeCount = 0;","    Node<T>* temp1 = oldList.getHead();;","    Node<T>* temp2 = temp1->mNext;","    Node<T>* newListTemp = newList.getHead();","   ","   //sets starting node and proceeding node to start traversal","   while(temp2->mNext != NULL)","   {","        setCount = nodeCount;","        //compares one node with all other nodes","        while(setCount != oldList.getCount())","        {","            if(isSame(temp1, temp2))  //check to see if compatible","            {","                if(newList.getHead() == NULL)","                    newList.getHead() = makeNewNode(temp1, temp2);","                else","                {","                    newListTemp = newListTemp->mNext;","                    newListTemp = makeNewNode(temp1, temp2);","                }","            }","            setCount++;","            temp2 = temp2->mNext;","        }","        nodeCount++;","        ","        temp1 = temp1->mNext;","        temp2 = temp1->mNext;","   }","}","","//adds data to the new node","template <class T>","Node<T>* Apriori<T>::makeNewNode(Node<T>* temp1, Node<T>* temp2)","{","   Node<T>* newNode = new Node<T>;","   newNode->mSize = newNode->size + 1;","","   for(int i = 0; i < temp1->mSize; i++)","   {","      newNode->mData[i] = temp1->mData[i];","   }","   newNode->mData[newNode->mSize - 1] = temp2->mData[temp2->mSize - 1];","   ","}","","//checks to see if all elements in sets are the same except for last element","template <class T>","bool Apriori<T>::isSame(Node<T>* temp1, Node<T>* temp2)","{","   bool theSame = true;","   ","   for(int i = 0; i < temp1->mSize; i++)","   {","      if(temp1->mData[i] != temp2->mData[i] && i < temp1->mSize - 1)","         theSame = false;","   }","   ","   return theSame;","}","","template <class T>","void Apriori<T>::setFrequencyThreshold(float percentage)","{","    mFrequencyThreshold = (mCountTransactions * percentage) / 100;","}","template <class T>","void Apriori<T>::prune()","{","    ","    ","}","template <class T>","void Apriori<T>::setCountTransactions(int count)","{","    mCountTransactions = count;","}","","#endif"]}]}],[{"group":"doc","deltas":[{"start":{"row":67,"column":25},"end":{"row":68,"column":0},"action":"insert","lines":["",""]},{"start":{"row":68,"column":0},"end":{"row":68,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":68,"column":4},"end":{"row":69,"column":0},"action":"insert","lines":["",""]},{"start":{"row":69,"column":0},"end":{"row":69,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":4},"end":{"row":69,"column":125},"action":"insert","lines":["    //http://mathbits.com/MathBits/CompSci/APstrings/APgetline.htm/*good website to figure out getline  cin >> asdfasdf*/"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":72},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":70,"column":8},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":71},"end":{"row":69,"column":72},"action":"remove","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":9},"end":{"row":69,"column":10},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":9},"end":{"row":69,"column":10},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":10},"end":{"row":70,"column":0},"action":"insert","lines":["",""]},{"start":{"row":70,"column":0},"end":{"row":70,"column":8},"action":"insert","lines":["        "]}]}]]},"ace":{"folds":[],"scrolltop":808,"scrollleft":0,"selection":{"start":{"row":70,"column":8},"end":{"row":70,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":49,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1417660462319,"hash":"201c8745cfeb6a60083d2ea4d5a69ccb5c52e176"}