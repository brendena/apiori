{"changed":true,"filter":false,"title":"Apriori.h","tooltip":"/header_files/Apriori.h","value":"/*\nError log\n\nSo currently there a problem with getDataFileCount it doens't get the last line of data.  It someithng with testing for the -1 part\n\n*/\n\n#ifndef APRIORI\n#define APRIORI\n\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"LinkedList.h\"\n\n#define blankSpace 32\n#define newLine 10\n\nusing namespace std;\n\ntemplate <typename T>\nclass Apriori\n{\n    private:\n        LinkedList<T> startingData;\n\t\tLinkedList<T> oldList;\n\t\tLinkedList<T> newList;\n        int getDataFileCount(ifstream& inputFile);\n        \n        int mFrequencyThreshold;  //s on the paper\n        int mCountTransactions;\n        \n        //makes new item sets\n        void makeSets();\n        Node<T>* makeNewNode(Node<T>* temp1, Node<T>* temp2);\n        bool isSame(Node<T>* temp1, Node<T>* temp2);\n    public:\n        //void findMinFrequ();\n        void cFirstCandList(); //create first candidate list\n        void fillStartingData(string file);\n        void displayEverthing();\n        \n        void setFrequencyThreshold(float percentage);\n        void setCountTransactions(int count);\n        void prune();\n\t\tApriori();\n\t\tApriori(int frequencyThreshold);\n};\ntemplate <typename T>\nApriori<T>::Apriori()\n{\n    mFrequencyThreshold = 5;\n}\n\ntemplate <typename T>\nApriori<T>::Apriori(int frequencyThreshold)\n{\n    mFrequencyThreshold = frequencyThreshold;\n}\n\n/*\nit shoots one to many\n*/\ntemplate <typename T>\nvoid Apriori<T>::fillStartingData(string file)\n{\n    ifstream inputFile;\n    inputFile.open(\"testdata.txt\");\n    int itemsInTransactions = 0; //number of items bought per transaction\n    int startingPosition;\n    int numberOfTransactions = 0; //total amount of transactions\n  \n    while(numberOfTransactions <= mCountTransactions && !inputFile.eof() && itemsInTransactions != -1)\n    {\n        startingPosition = inputFile.tellg(); //tellg get the position of the file input\n        itemsInTransactions = getDataFileCount(inputFile);\n        if(itemsInTransactions == -1){ // error saying didn't take in any numbers\n    \t\tcout << \"error error \\n\"\n    \t\t     << \"broke with less then wanted number of transaction \\n\" \n    \t\t     << \"endded with \"  << numberOfTransactions << \"\\n\\n\\n\"  ;\n    \t\tbreak;\n        }\n\telse\n\t{\n            inputFile.seekg(startingPosition,inputFile.beg);\n            startingData.createArray(itemsInTransactions);\n            string junk;\n            string input;\n            for(int i = 0; i < itemsInTransactions; i++)\n            {\n    \t\t\tinputFile >> junk; //gettint the transactional number\n    \t\t\tinputFile.get(); //getting the space\n    \t\t\tinputFile >> input; //gets the input number\n\t\t\tinputFile.get();// gets the newline character\n    \t\t\tcout << endl << input << \" \" << i << \"  \\n\";\n    \t\t\tstartingData.setArrayData(i,stoi(input));\n\t     }\n\t     \n\t }\n\tnumberOfTransactions++;\n    }\n    cout << \"\\n its done \\n\";\n    inputFile.close();\n}\n\n/*\npre:\npost: return the number of items per line\n1 item = return of 1\npurpose: is to get the total amount of items so we can make a static array\n */\ntemplate <typename T>\nint Apriori<T>::getDataFileCount(ifstream& inputFile)\n{\n    int count = 0;\n    \n    if(inputFile.eof())\n    {\n        count = -1;\n    }\n    else\n    {\n        string getLineString;\n        getline(inputFile, getLineString);\n        char transactionNumber = getLineString[0];\n        cout << \"transactionNumber << \" << transactionNumber << endl;  \n        do\n        {\n            count++; // it add plus plus for the item before this\n            getline(inputFile, getLineString);\n        }while(transactionNumber == getLineString[0]); //so ifthe transaction number don't match\n    }\n    return count;\n}\n\n\n\n/*\nvoid Apriori::findMinFrequ()\n{\n    \n    \n}\n*/\n\n/*\nhave not tested with search works\n*/\ntemplate <typename T>\nvoid Apriori<T>::cFirstCandList()\n{\n    \n    startingData.clearIterator();\n    do{\n        T* data = startingData.getIteratorValue();\n        //cout << startingData.getIteratorSize() << endl << endl;\n        for(int i = 0; i < startingData.getIteratorSize(); i++)\n        {\n            if(!newList.search(data[i])) //not found\n            {\n                cout << \"this is data\" << data[i] << endl;\n                Node<T>* newNode = new Node<T>(1, data[i]);\n                newList.appendToTheEnd(newNode);\n            }\n        }\n    }while(startingData++);\n}\ntemplate <typename T>\nvoid Apriori<T>::displayEverthing()\n{\n    //startingData.display();\n    //oldList.display();\n    newList.display();\n}\n\n\n\n//adds new nodes to new list\n/*\ndoesn't check for doub's but i don't think it needs to\n*/\ntemplate <class T>\nvoid Apriori<T>::makeSets() //uses the new and old linked list\n{\n    //copy newList to oldLink to free up newList for the new sets with overloaded operator\n    oldList = newList;\n    //clear newList\n    newList.clear();\n    \n    int setCount;\n    int nodeCount = 0;\n    Node<T>* temp1 = oldList.getHead();;\n    Node<T>* temp2 = temp1->mNext;\n    Node<T>* newListTemp = newList.getHead();\n   \n   //sets starting node and proceeding node to start traversal\n   while(temp2->mNext != NULL)\n   {\n        setCount = nodeCount;\n        //compares one node with all other nodes\n        while(setCount != oldList.getCount())\n        {\n            if(isSame(temp1, temp2))  //check to see if compatible\n            {\n                if(newList.getHead() == NULL)\n                    newList.getHead() = makeNewNode(temp1, temp2);\n                else\n                {\n                    newListTemp = newListTemp->mNext;\n                    newListTemp = makeNewNode(temp1, temp2);\n                }\n            }\n            setCount++;\n            temp2 = temp2->mNext;\n        }\n        nodeCount++;\n        \n        temp1 = temp1->mNext;\n        temp2 = temp1->mNext;\n   }\n}\n\n//adds data to the new node\ntemplate <class T>\nNode<T>* Apriori<T>::makeNewNode(Node<T>* temp1, Node<T>* temp2)\n{\n   Node<T>* newNode = new Node<T>;\n   newNode->mSize = newNode->size + 1;\n\n   for(int i = 0; i < temp1->mSize; i++)\n   {\n      newNode->mData[i] = temp1->mData[i];\n   }\n   newNode->mData[newNode->mSize - 1] = temp2->mData[temp2->mSize - 1];\n   \n}\n\n//checks to see if all elements in sets are the same except for last element\ntemplate <class T>\nbool Apriori<T>::isSame(Node<T>* temp1, Node<T>* temp2)\n{\n   bool theSame = true;\n   \n   for(int i = 0; i < temp1->mSize; i++)\n   {\n      if(temp1->mData[i] != temp2->mData[i] && i < temp1->mSize - 1)\n         theSame = false;\n   }\n   \n   return theSame;\n}\n\ntemplate <class T>\nvoid Apriori<T>::setFrequencyThreshold(float percentage)\n{\n    mFrequencyThreshold = (mCountTransactions * percentage) / 100;\n}\n  \ntemplate <class T>\nvoid Apriori<T>::setCountTransactions(int count)\n{\n    mCountTransactions = count;\n}\ntemplate <class T>\nvoid Apriori<T>::prune()\n{\n\tNode<T>* currNode = newList.getHead();\n\tNode<T>* lastNode;  //previous node\n\twhile(currNode != NULL)\n\t{\n    \tfor(int i = 0; i < oldList.getCount(); i++)\n    \t{\n    \t\tfor(int j = 0; j < currNode->mSize; j++)\n    \t\t{\n\t\t\t\tT* subset = new T[currNode->mSize - 1];  //one less than current node's size\n\t\t\t\tfor(int k = 0; k < currNode->mSize - 1; k++)\n\t\t\t\t{\n\t\t\t\t\tif(k < j)\n\t\t\t\t\t{\n\t\t\t\t\t\tsubset[k] = currNode->mData[k];\n\t\t\t\t\t}\t\t\t\t\n                        if(k > j)\n\t\t\t\t\t{\n\t\t\t\t\t\tsubset[k] = currNode->mData[k + 1];\n\t\t\t\t\t}\n\t\t\t\t} //end of for K < currNode->size\n\t\t\t\tNode<T>* subsetNode = new Node<T>(subset->mSize,subset);\n\t\t\t\tif(!oldList.searchForNode(currNode->mSize - 1, subsetNode)) //checkListForNode?\n\t\t\t\t{\n\t\t\t\t\tNode<T>* tmp = currNode;\n\t\t\t\t\tcurrNode = currNode->mNext;\n\t\t\t\t\tif(i == 0) newList.setHead(currNode);\n\t\t\t\t\telse lastNode->mNext = currNode;\n\t\t\t\t\tdelete tmp;\n\t\t\t    }\n\t\t\t    delete subsetNode;\n    \t\t} // end of for J < CurrNode->mSize\n    \t} //end of I < old.mCount\n    \tlastNode = currNode;\n    \tcurrNode = currNode->mNext;\n\t}//end of the while(cNode != NULL)\n}\n\n\n#endif\n","undoManager":{"mark":51,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":296,"column":7},"end":{"row":296,"column":8},"action":"insert","lines":["{"]}]}],[{"group":"doc","deltas":[{"start":{"row":296,"column":8},"end":{"row":298,"column":8},"action":"insert","lines":["","\t\t\t        ","\t\t\t    }"]}]}],[{"group":"doc","deltas":[{"start":{"row":286,"column":41},"end":{"row":286,"column":44},"action":"insert","lines":["set"]}]}],[{"group":"doc","deltas":[{"start":{"row":286,"column":44},"end":{"row":286,"column":46},"action":"insert","lines":["->"]}]}],[{"group":"doc","deltas":[{"start":{"row":286,"column":46},"end":{"row":286,"column":47},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":286,"column":47},"end":{"row":286,"column":52},"action":"insert","lines":["Size,"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":11},"end":{"row":297,"column":12},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":12},"end":{"row":297,"column":13},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":13},"end":{"row":297,"column":14},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":14},"end":{"row":297,"column":15},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":15},"end":{"row":297,"column":16},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":16},"end":{"row":297,"column":17},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":17},"end":{"row":297,"column":18},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":18},"end":{"row":297,"column":20},"action":"insert","lines":["[]"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":20},"end":{"row":297,"column":21},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":20},"end":{"row":297,"column":21},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":19},"end":{"row":297,"column":20},"action":"remove","lines":["]"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":18},"end":{"row":297,"column":19},"action":"remove","lines":["["]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":18},"end":{"row":297,"column":19},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":19},"end":{"row":297,"column":20},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":18},"end":{"row":297,"column":20},"action":"remove","lines":["su"]},{"start":{"row":297,"column":18},"end":{"row":297,"column":28},"action":"insert","lines":["subsetNode"]}]}],[{"group":"doc","deltas":[{"start":{"row":297,"column":28},"end":{"row":297,"column":29},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":24},"end":{"row":290,"column":25},"action":"remove","lines":["."]},{"start":{"row":290,"column":24},"end":{"row":290,"column":26},"action":"insert","lines":["->"]}]}],[{"group":"doc","deltas":[{"start":{"row":292,"column":18},"end":{"row":292,"column":19},"action":"remove","lines":["."]},{"start":{"row":292,"column":18},"end":{"row":292,"column":20},"action":"insert","lines":["->"]}]}],[{"group":"doc","deltas":[{"start":{"row":294,"column":8},"end":{"row":298,"column":8},"action":"remove","lines":["","\t\t\t    else","\t\t\t    {","\t\t\t        delete subsetNode;","\t\t\t    }"]},{"start":{"row":294,"column":8},"end":{"row":295,"column":0},"action":"insert","lines":["",""]},{"start":{"row":295,"column":0},"end":{"row":295,"column":7},"action":"insert","lines":["\t\t\t    "]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":7},"end":{"row":295,"column":8},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":8},"end":{"row":295,"column":9},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":9},"end":{"row":295,"column":10},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":10},"end":{"row":295,"column":11},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":11},"end":{"row":295,"column":12},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":12},"end":{"row":295,"column":13},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":13},"end":{"row":295,"column":14},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":14},"end":{"row":295,"column":15},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":15},"end":{"row":295,"column":16},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":14},"end":{"row":295,"column":16},"action":"remove","lines":["su"]},{"start":{"row":295,"column":14},"end":{"row":295,"column":24},"action":"insert","lines":["subsetNode"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":24},"end":{"row":295,"column":26},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":25},"end":{"row":295,"column":26},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":24},"end":{"row":295,"column":25},"action":"remove","lines":["("]}]}],[{"group":"doc","deltas":[{"start":{"row":295,"column":24},"end":{"row":295,"column":25},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":32},"end":{"row":291,"column":36},"action":"remove","lines":[") = "]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":40},"end":{"row":291,"column":41},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":24},"end":{"row":291,"column":25},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":24},"end":{"row":291,"column":25},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":25},"end":{"row":290,"column":26},"action":"remove","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":24},"end":{"row":290,"column":25},"action":"remove","lines":["-"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":24},"end":{"row":290,"column":25},"action":"insert","lines":["-"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":25},"end":{"row":290,"column":26},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":292,"column":19},"end":{"row":292,"column":20},"action":"remove","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":292,"column":18},"end":{"row":292,"column":19},"action":"remove","lines":["-"]}]}],[{"group":"doc","deltas":[{"start":{"row":292,"column":18},"end":{"row":292,"column":19},"action":"insert","lines":["-"]}]}],[{"group":"doc","deltas":[{"start":{"row":292,"column":19},"end":{"row":292,"column":20},"action":"insert","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":286,"column":38},"end":{"row":286,"column":52},"action":"remove","lines":["subset->mSize,"]},{"start":{"row":286,"column":38},"end":{"row":286,"column":52},"action":"insert","lines":["subset->mSize,"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":32},"end":{"row":299,"column":33},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":32},"end":{"row":299,"column":33},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":33},"end":{"row":299,"column":34},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":34},"end":{"row":299,"column":35},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":35},"end":{"row":299,"column":36},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":36},"end":{"row":299,"column":37},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":37},"end":{"row":299,"column":38},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":38},"end":{"row":299,"column":39},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":39},"end":{"row":299,"column":40},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":40},"end":{"row":299,"column":41},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":41},"end":{"row":299,"column":42},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":42},"end":{"row":299,"column":43},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":43},"end":{"row":299,"column":44},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":44},"end":{"row":299,"column":45},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":45},"end":{"row":299,"column":46},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":46},"end":{"row":299,"column":47},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":47},"end":{"row":299,"column":48},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":48},"end":{"row":299,"column":49},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":49},"end":{"row":299,"column":50},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":50},"end":{"row":299,"column":51},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":51},"end":{"row":299,"column":52},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":52},"end":{"row":299,"column":53},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":53},"end":{"row":299,"column":54},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":54},"end":{"row":299,"column":55},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":55},"end":{"row":299,"column":56},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":55},"end":{"row":299,"column":56},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":54},"end":{"row":299,"column":55},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":53},"end":{"row":299,"column":54},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":52},"end":{"row":299,"column":53},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":51},"end":{"row":299,"column":52},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":50},"end":{"row":299,"column":51},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":49},"end":{"row":299,"column":50},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":48},"end":{"row":299,"column":49},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":47},"end":{"row":299,"column":48},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":46},"end":{"row":299,"column":47},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":45},"end":{"row":299,"column":46},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":44},"end":{"row":299,"column":45},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":43},"end":{"row":299,"column":44},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":42},"end":{"row":299,"column":43},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":41},"end":{"row":299,"column":42},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":40},"end":{"row":299,"column":41},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":39},"end":{"row":299,"column":40},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":38},"end":{"row":299,"column":39},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":37},"end":{"row":299,"column":38},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":36},"end":{"row":299,"column":37},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":35},"end":{"row":299,"column":36},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":34},"end":{"row":299,"column":35},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":33},"end":{"row":299,"column":34},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":299,"column":32},"end":{"row":299,"column":33},"action":"remove","lines":[";"]}]}]]},"ace":{"folds":[],"scrolltop":3911,"scrollleft":0,"selection":{"start":{"row":299,"column":32},"end":{"row":299,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":42,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1417709092000}